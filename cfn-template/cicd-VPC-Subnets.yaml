AWSTemplateFormatVersion: 2010-09-09

Parameters:
  VpcCIDR:
    Description: CIDR for VPC
    Type: String
    Default: ''

  PublicSubnetOneCIDR:
    Description: CIDR for the public subnet in the first Availability Zone
    Type: String
    Default: ''

  PublicSubnetTwoCIDR:
    Description: CIDR for the public subnet in the second Availability Zone
    Type: String
    Default: ''

  PrivateSubnetOneCIDR:
    Description: CIDR for the private subnet in the first Availability Zone
    Type: String
    Default: ''

  PrivateSubnetTwoCIDR:
    Description: CIDR for the private subnet in the second Availability Zone
    Type: String
    Default: ''

Resources:
  #VPCs, Subnets, Route Tables, Routes
  cicdVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
       - Key: Name
         Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref cicdVPC

  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref cicdVPC
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: AWS::Region}
      CidrBlock: !Ref PublicSubnetOneCIDR
      MapPublicIpOnLaunch: true
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-PublicSubnet1

  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref cicdVPC
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: AWS::Region}
      CidrBlock: !Ref PublicSubnetTwoCIDR
      MapPublicIpOnLaunch: true
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-PublicSubnet2

  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref cicdVPC
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: {Ref: AWS::Region}
      CidrBlock: !Ref PrivateSubnetOneCIDR
      MapPublicIpOnLaunch: true
      #Block NAT Gateways to save cost in test environment
      #MapPublicIpOnLaunch: false
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-PrivateSubnet1

  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref cicdVPC
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: {Ref: AWS::Region}
      CidrBlock: !Ref PrivateSubnetTwoCIDR
      MapPublicIpOnLaunch: true
      #Block NAT Gateways to save cost in test environment
      #MapPublicIpOnLaunch: false
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-PrivateSubnet2

  #Block NAT Gateways to save cost in test environment
  #NatGateway1EIP:
  #  Type: AWS::EC2::EIP
  #  DependsOn: InternetGatewayAttachment
  #  Properties:
  #    Domain: vpc

  #Block NAT Gateways to save cost in test environment
  #NatGateway2EIP:
  #  Type: AWS::EC2::EIP
  #  DependsOn: InternetGatewayAttachment
  #  Properties:
  #    Domain: vpc

  #Block NAT Gateways to save cost in test environment
  #NatGateway1:
  #  Type: AWS::EC2::NatGateway
  #  Properties:
  #    AllocationId: !GetAtt NatGateway1EIP.AllocationId
  #    SubnetId: !Ref PublicSubnetOne

  #Block NAT Gateways to save cost in test environment
  #NatGateway2:
  #  Type: AWS::EC2::NatGateway
  #  Properties:
  #    AllocationId: !GetAtt NatGateway2EIP.AllocationId
  #    SubnetId: !Ref PublicSubnetTwo

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref cicdVPC
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-PublicRouteTbl

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetOne

  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetTwo

  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref cicdVPC
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-PrivateRouteTbl1

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    #Block NAT Gateways to save cost in test environment
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      #Block NAT Gateways to save cost in test environment
      #NatGatewayId: !Ref NatGateway1

  PrivateSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne

  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref cicdVPC
      Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-PrivateRouteTbl2

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    #Block NAT Gateways to save cost in test environment
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      #Block NAT Gateways to save cost in test environment
      #NatGatewayId: !Ref NatGateway2

  PrivateSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo

Outputs:
  cicdVPCID:
    Value: !Ref cicdVPC
  PublicSubnetOneID:
    Value: !Ref PublicSubnetOne
  PublicSubnetTwoID:
    Value: !Ref PublicSubnetTwo
  PrivateSubnetOneID:
    Value: !Ref PrivateSubnetOne
  PrivateSubnetTwoID:
    Value: !Ref PrivateSubnetTwo
